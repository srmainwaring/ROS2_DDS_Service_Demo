// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AddTwoInts.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AddTwoInts.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define AddTwoInts_Reply_max_cdr_typesize 8ULL;
#define AddTwoInts_Request_max_cdr_typesize 16ULL;
#define AddTwoInts_Reply_max_key_cdr_typesize 0ULL;
#define AddTwoInts_Request_max_key_cdr_typesize 0ULL;

AddTwoInts_Request::AddTwoInts_Request()
{
    // long long m_a
    m_a = 0;
    // long long m_b
    m_b = 0;

}

AddTwoInts_Request::~AddTwoInts_Request()
{


}

AddTwoInts_Request::AddTwoInts_Request(
        const AddTwoInts_Request& x)
{
    m_a = x.m_a;
    m_b = x.m_b;
}

AddTwoInts_Request::AddTwoInts_Request(
        AddTwoInts_Request&& x) noexcept 
{
    m_a = x.m_a;
    m_b = x.m_b;
}

AddTwoInts_Request& AddTwoInts_Request::operator =(
        const AddTwoInts_Request& x)
{

    m_a = x.m_a;
    m_b = x.m_b;

    return *this;
}

AddTwoInts_Request& AddTwoInts_Request::operator =(
        AddTwoInts_Request&& x) noexcept
{

    m_a = x.m_a;
    m_b = x.m_b;

    return *this;
}

bool AddTwoInts_Request::operator ==(
        const AddTwoInts_Request& x) const
{

    return (m_a == x.m_a && m_b == x.m_b);
}

bool AddTwoInts_Request::operator !=(
        const AddTwoInts_Request& x) const
{
    return !(*this == x);
}

size_t AddTwoInts_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AddTwoInts_Request_max_cdr_typesize;
}

size_t AddTwoInts_Request::getCdrSerializedSize(
        const AddTwoInts_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void AddTwoInts_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_a;
    scdr << m_b;

}

void AddTwoInts_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_a;
    dcdr >> m_b;
}

/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void AddTwoInts_Request::a(
        int64_t _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
int64_t AddTwoInts_Request::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
int64_t& AddTwoInts_Request::a()
{
    return m_a;
}

/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void AddTwoInts_Request::b(
        int64_t _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
int64_t AddTwoInts_Request::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
int64_t& AddTwoInts_Request::b()
{
    return m_b;
}



size_t AddTwoInts_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AddTwoInts_Request_max_key_cdr_typesize;
}

bool AddTwoInts_Request::isKeyDefined()
{
    return false;
}

void AddTwoInts_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


AddTwoInts_Reply::AddTwoInts_Reply()
{
    // long long m_sum
    m_sum = 0;

}

AddTwoInts_Reply::~AddTwoInts_Reply()
{
}

AddTwoInts_Reply::AddTwoInts_Reply(
        const AddTwoInts_Reply& x)
{
    m_sum = x.m_sum;
}

AddTwoInts_Reply::AddTwoInts_Reply(
        AddTwoInts_Reply&& x) noexcept 
{
    m_sum = x.m_sum;
}

AddTwoInts_Reply& AddTwoInts_Reply::operator =(
        const AddTwoInts_Reply& x)
{

    m_sum = x.m_sum;

    return *this;
}

AddTwoInts_Reply& AddTwoInts_Reply::operator =(
        AddTwoInts_Reply&& x) noexcept
{

    m_sum = x.m_sum;

    return *this;
}

bool AddTwoInts_Reply::operator ==(
        const AddTwoInts_Reply& x) const
{

    return (m_sum == x.m_sum);
}

bool AddTwoInts_Reply::operator !=(
        const AddTwoInts_Reply& x) const
{
    return !(*this == x);
}

size_t AddTwoInts_Reply::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AddTwoInts_Reply_max_cdr_typesize;
}

size_t AddTwoInts_Reply::getCdrSerializedSize(
        const AddTwoInts_Reply& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void AddTwoInts_Reply::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sum;

}

void AddTwoInts_Reply::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sum;
}

/*!
 * @brief This function sets a value in member sum
 * @param _sum New value for member sum
 */
void AddTwoInts_Reply::sum(
        int64_t _sum)
{
    m_sum = _sum;
}

/*!
 * @brief This function returns the value of member sum
 * @return Value of member sum
 */
int64_t AddTwoInts_Reply::sum() const
{
    return m_sum;
}

/*!
 * @brief This function returns a reference to member sum
 * @return Reference to member sum
 */
int64_t& AddTwoInts_Reply::sum()
{
    return m_sum;
}



size_t AddTwoInts_Reply::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AddTwoInts_Reply_max_key_cdr_typesize;
}

bool AddTwoInts_Reply::isKeyDefined()
{
    return false;
}

void AddTwoInts_Reply::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

