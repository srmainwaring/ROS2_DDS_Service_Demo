// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ArmMotorsInt64.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ArmMotorsInt64.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define ArmMotorsInt64_Request_max_cdr_typesize 8ULL;
#define ArmMotorsInt64_Reply_max_cdr_typesize 8ULL;
#define ArmMotorsInt64_Request_max_key_cdr_typesize 0ULL;
#define ArmMotorsInt64_Reply_max_key_cdr_typesize 0ULL;

ArmMotorsInt64_Request::ArmMotorsInt64_Request()
{
    // long long m_arm
    m_arm = 0;

}

ArmMotorsInt64_Request::~ArmMotorsInt64_Request()
{
}

ArmMotorsInt64_Request::ArmMotorsInt64_Request(
        const ArmMotorsInt64_Request& x)
{
    m_arm = x.m_arm;
}

ArmMotorsInt64_Request::ArmMotorsInt64_Request(
        ArmMotorsInt64_Request&& x) noexcept 
{
    m_arm = x.m_arm;
}

ArmMotorsInt64_Request& ArmMotorsInt64_Request::operator =(
        const ArmMotorsInt64_Request& x)
{

    m_arm = x.m_arm;

    return *this;
}

ArmMotorsInt64_Request& ArmMotorsInt64_Request::operator =(
        ArmMotorsInt64_Request&& x) noexcept
{

    m_arm = x.m_arm;

    return *this;
}

bool ArmMotorsInt64_Request::operator ==(
        const ArmMotorsInt64_Request& x) const
{

    return (m_arm == x.m_arm);
}

bool ArmMotorsInt64_Request::operator !=(
        const ArmMotorsInt64_Request& x) const
{
    return !(*this == x);
}

size_t ArmMotorsInt64_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ArmMotorsInt64_Request_max_cdr_typesize;
}

size_t ArmMotorsInt64_Request::getCdrSerializedSize(
        const ArmMotorsInt64_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void ArmMotorsInt64_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_arm;

}

void ArmMotorsInt64_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_arm;
}

/*!
 * @brief This function sets a value in member arm
 * @param _arm New value for member arm
 */
void ArmMotorsInt64_Request::arm(
        int64_t _arm)
{
    m_arm = _arm;
}

/*!
 * @brief This function returns the value of member arm
 * @return Value of member arm
 */
int64_t ArmMotorsInt64_Request::arm() const
{
    return m_arm;
}

/*!
 * @brief This function returns a reference to member arm
 * @return Reference to member arm
 */
int64_t& ArmMotorsInt64_Request::arm()
{
    return m_arm;
}



size_t ArmMotorsInt64_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ArmMotorsInt64_Request_max_key_cdr_typesize;
}

bool ArmMotorsInt64_Request::isKeyDefined()
{
    return false;
}

void ArmMotorsInt64_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


ArmMotorsInt64_Reply::ArmMotorsInt64_Reply()
{
    // long long m_result
    m_result = 0;

}

ArmMotorsInt64_Reply::~ArmMotorsInt64_Reply()
{
}

ArmMotorsInt64_Reply::ArmMotorsInt64_Reply(
        const ArmMotorsInt64_Reply& x)
{
    m_result = x.m_result;
}

ArmMotorsInt64_Reply::ArmMotorsInt64_Reply(
        ArmMotorsInt64_Reply&& x) noexcept 
{
    m_result = x.m_result;
}

ArmMotorsInt64_Reply& ArmMotorsInt64_Reply::operator =(
        const ArmMotorsInt64_Reply& x)
{

    m_result = x.m_result;

    return *this;
}

ArmMotorsInt64_Reply& ArmMotorsInt64_Reply::operator =(
        ArmMotorsInt64_Reply&& x) noexcept
{

    m_result = x.m_result;

    return *this;
}

bool ArmMotorsInt64_Reply::operator ==(
        const ArmMotorsInt64_Reply& x) const
{

    return (m_result == x.m_result);
}

bool ArmMotorsInt64_Reply::operator !=(
        const ArmMotorsInt64_Reply& x) const
{
    return !(*this == x);
}

size_t ArmMotorsInt64_Reply::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ArmMotorsInt64_Reply_max_cdr_typesize;
}

size_t ArmMotorsInt64_Reply::getCdrSerializedSize(
        const ArmMotorsInt64_Reply& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void ArmMotorsInt64_Reply::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_result;

}

void ArmMotorsInt64_Reply::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_result;
}

/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void ArmMotorsInt64_Reply::result(
        int64_t _result)
{
    m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
int64_t ArmMotorsInt64_Reply::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
int64_t& ArmMotorsInt64_Reply::result()
{
    return m_result;
}



size_t ArmMotorsInt64_Reply::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ArmMotorsInt64_Reply_max_key_cdr_typesize;
}

bool ArmMotorsInt64_Reply::isKeyDefined()
{
    return false;
}

void ArmMotorsInt64_Reply::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

